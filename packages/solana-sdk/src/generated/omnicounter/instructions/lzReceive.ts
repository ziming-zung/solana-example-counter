/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { LzReceiveParams, lzReceiveParamsBeet } from '../types/LzReceiveParams'

/**
 * @category Instructions
 * @category LzReceive
 * @category generated
 */
export type LzReceiveInstructionArgs = {
  params: LzReceiveParams
}
/**
 * @category Instructions
 * @category LzReceive
 * @category generated
 */
export const lzReceiveStruct = new beet.FixableBeetArgsStruct<
  LzReceiveInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', lzReceiveParamsBeet],
  ],
  'LzReceiveInstructionArgs'
)
/**
 * Accounts required by the _lzReceive_ instruction
 *
 * @property [_writable_] count
 * @property [] remote
 * @category Instructions
 * @category LzReceive
 * @category generated
 */
export type LzReceiveInstructionAccounts = {
  count: web3.PublicKey
  remote: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const lzReceiveInstructionDiscriminator = [
  8, 179, 120, 109, 33, 118, 189, 80,
]

/**
 * Creates a _LzReceive_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LzReceive
 * @category generated
 */
export function createLzReceiveInstruction(
  accounts: LzReceiveInstructionAccounts,
  args: LzReceiveInstructionArgs,
  programId = new web3.PublicKey('2tLJfE12h5RY7vJqK6i41taeg8ejzigoFXduBanDV4Cu')
) {
  const [data] = lzReceiveStruct.serialize({
    instructionDiscriminator: lzReceiveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.count,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.remote,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
