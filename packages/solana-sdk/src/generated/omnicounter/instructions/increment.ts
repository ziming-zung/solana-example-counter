/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { IncrementParams, incrementParamsBeet } from '../types/IncrementParams'

/**
 * @category Instructions
 * @category Increment
 * @category generated
 */
export type IncrementInstructionArgs = {
  params: IncrementParams
}
/**
 * @category Instructions
 * @category Increment
 * @category generated
 */
export const incrementStruct = new beet.FixableBeetArgsStruct<
  IncrementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', incrementParamsBeet],
  ],
  'IncrementInstructionArgs'
)
/**
 * Accounts required by the _increment_ instruction
 *
 * @property [] remote
 * @property [] count
 * @property [] endpoint
 * @category Instructions
 * @category Increment
 * @category generated
 */
export type IncrementInstructionAccounts = {
  remote: web3.PublicKey
  count: web3.PublicKey
  endpoint: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const incrementInstructionDiscriminator = [
  11, 18, 104, 9, 104, 174, 59, 33,
]

/**
 * Creates a _Increment_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Increment
 * @category generated
 */
export function createIncrementInstruction(
  accounts: IncrementInstructionAccounts,
  args: IncrementInstructionArgs,
  programId = new web3.PublicKey('2tLJfE12h5RY7vJqK6i41taeg8ejzigoFXduBanDV4Cu')
) {
  const [data] = incrementStruct.serialize({
    instructionDiscriminator: incrementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.remote,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.count,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.endpoint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
