/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { InitCountParams, initCountParamsBeet } from '../types/InitCountParams'

/**
 * @category Instructions
 * @category InitCount
 * @category generated
 */
export type InitCountInstructionArgs = {
  params: InitCountParams
}
/**
 * @category Instructions
 * @category InitCount
 * @category generated
 */
export const initCountStruct = new beet.BeetArgsStruct<
  InitCountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', initCountParamsBeet],
  ],
  'InitCountInstructionArgs'
)
/**
 * Accounts required by the _initCount_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] count
 * @property [_writable_] lzReceiveTypesAccounts
 * @property [_writable_] lzComposeTypesAccounts
 * @category Instructions
 * @category InitCount
 * @category generated
 */
export type InitCountInstructionAccounts = {
  payer: web3.PublicKey
  count: web3.PublicKey
  lzReceiveTypesAccounts: web3.PublicKey
  lzComposeTypesAccounts: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initCountInstructionDiscriminator = [
  230, 121, 12, 3, 79, 21, 202, 1,
]

/**
 * Creates a _InitCount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitCount
 * @category generated
 */
export function createInitCountInstruction(
  accounts: InitCountInstructionAccounts,
  args: InitCountInstructionArgs,
  programId = new web3.PublicKey('2tLJfE12h5RY7vJqK6i41taeg8ejzigoFXduBanDV4Cu')
) {
  const [data] = initCountStruct.serialize({
    instructionDiscriminator: initCountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.count,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lzReceiveTypesAccounts,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lzComposeTypesAccounts,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
